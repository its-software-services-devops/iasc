name: IASC - cli

on:
  push:
    branches: [ develop, main ]
    tags: ['v*.*.*']

env:
  ENV_GCR_IMAGE: gcr.io/its-artifact-commons/iasc
  DEPLOY_PROJECT_ID: ${{ secrets.CLOUDRUN_PROJECT_ID }}
  RUN_REGION: asia-southeast1
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=itssoftware/iasc
        GCR_IMAGE=$ENV_GCR_IMAGE
        VERSION=latest
        GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          VERSION=$BRANCH-$GIT_HASH
        fi

        TAGS="${DOCKER_IMAGE}:${VERSION}"
        GCR_TAGS="${GCR_IMAGE}:${VERSION}"

        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        elif [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi

        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=gcr_tags::${GCR_TAGS}
        echo ::set-output name=version::${VERSION}

    - name: Line notification start
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Start building [iasc] [${{ steps.prep.outputs.version }}]..."

    - name: SonarScanner for .NET 5 with pull request decoration support
      uses: highbyte/sonarscan-dotnet@v2.1.1-beta
      with:
        # The key of the SonarQube project
        sonarProjectKey: its-software-services-devops_iasc
        # The name of the SonarQube project
        sonarProjectName:  iasc
        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
        sonarOrganization: its-software-services-devops
        # Optional command arguments to dotnet test
        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        # Optional extra command arguments the the SonarScanner 'begin' command
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
                
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Activate GCP service account
      uses: google-github-actions/github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_EMAIL }}
        service_account_key: ${{ secrets.GCR_KEY }}

    - name: GCR Authen
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - name: Build and push images
      uses: docker/build-push-action@v2
      with:
        file: Dockerfile
        push: true
        load: false
        tags: ${{ steps.prep.outputs.gcr_tags }}
        build-args: version=${{ steps.prep.outputs.version }}

    - name: show job status
      if: always()
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Done building [iasc] [${{ steps.prep.outputs.version }}] with status [${{job.status}}]"
